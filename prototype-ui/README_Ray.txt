The code follows the same design as Intersect, in fact, all code from Intersect remains structurally unchanged, with only small modifications to extend the required functionality wherever possible. Everything is still self-contained in Ray.hxx

A new namespace Texture is added for image mapping and surface parameterization. Texture::Map is the function that performs image mapping and all surface parameterizers are under the Texture::SurfaceParameterizers namespace. The parameterizers are indirectly invoked by implicit functions.

Two new functions have been added to the Illuminations namespace. Illuminations::Specular does what its name suggests. The illumination model has been moved out of Canvas2D::renderImage since the full phong lighting model is complex enough to deserve its own top-level function. Specifically, an illumination model can be generated by Illuminations::ConfigureIlluminationModel, it is a higher order function, it takes a set of lights, ka, kd, ks, texture image, and the object records, and returns an illumination model of type glm::vec4 (position) -> glm::vec4 (normal) -> glm::vec4 (eye point) -> double (v) -> double (u) -> ObjectMaterial -> glm::vec4 (accumulated intensity). The illumination model will be indirectly invoked by Ray::Trace.

All implicit functions now return a tuple of 4 values { t, v, u, normal } rather than a tuple of { t, normal } to support surface parameterization.

The old Ray::Trace has been rewritten to Ray::Intersect, it no longer requires an illumination model and it returns an intersection record in a tuple of { t, v, u, world space normal }. Both Ray::DetectOcclusion and Ray::Trace rely on Ray::Intersect. Ray::DetectOcclusion checks if thereâ€™s any occlusion along a given ray direction, it is invoked by an illumination model to produce shadows. Ray::Trace is the main (recursive) ray tracing function, the maximum recursion depth is controlled by Ray::DefaultRecursiveTracingDepth, 1 means no recursion (no reflection).

The rest of the code is pretty self-explanatory and you should be able to understand at first glance. If you have a problem understanding certain C++ constructs in my code, or if the code does not compile for you, please consider referring to the Brush and Shape readme.

Compiling in release mode is HIGHLY RECOMMENDED! It turns on -O3 optimization which results in hundreds of times faster rendering.
